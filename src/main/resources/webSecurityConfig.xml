<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:sec="http://www.springframework.org/schema/security"
    xsi:schemaLocation="
      http://www.springframework.org/schema/security/oauth2
      http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security-3.2.xsd
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.1.xsd">

    <!-- Rest authentication entry point configuration -->
    <!--<http auto-config="true" use-expressions="true" create-session="stateless"
        entry-point-ref="restServicesEntryPoint" authentication-manager-ref="authenticationManagerForRest">
        <intercept-url pattern="/public/**" access="permitAll"/>
        <intercept-url pattern="/api/**" />
        <sec:form-login authentication-success-handler-ref="mySuccessHandler" />
        <sec:access-denied-handler ref="myAuthenticationAccessDeniedHandler" />
        <http-basic />
    </http>-->
    
    <!-- URL for Oauth token -->
    <http pattern="/oauth/token" 
        create-session="stateless"
        authentication-manager-ref="clientAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- This is included to authenticate clients via request parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="myAuthenticationAccessDeniedHandler" />
    </http>
    
    <!-- Tell spring what URLs are protected under which roles -->
    <http pattern="/api/**" 
        create-session="never"
        entry-point-ref="oauthAuthenticationEntryPoint"
        access-decision-manager-ref="accessDecisionManager"
        xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/api/**" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="myAuthenticationAccessDeniedHandler" />
    </http>
    
    <!-- Oauth Entry Point -->
    <beans:bean id="oauthAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test" />
    </beans:bean>
    <beans:bean id="clientAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test/client" />
        <property name="typeName" value="Basic" />
    </beans:bean>
    <beans:bean id="oauthAccessDeniedHandler"
        class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    <beans:bean id="clientCredentialsTokenEndpointFilter"
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </beans:bean>
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
        xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>
    <bean id="userAuthenticationProvider" class="com.pd.api.security.UserAuthenticationProvider"></bean>
    <authentication-manager id="clientAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>
    <!-- This is simple authentication manager, with a hardcoded user/password 
        combination. We can replace this with a user defined service to get few users 
        credentials from DB -->
    <authentication-manager alias="authenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <authentication-provider ref="userAuthenticationProvider">
        </authentication-provider>
    </authentication-manager>
    <bean id="clientDetailsUserService"
        class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>
    <!-- This defined token store, we have used inmemory tokenstore for now 
        but this can be changed to a user defined one -->
    <bean id="tokenStore"
        class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />
    <!-- This is where we defined token based configurations, token validity 
        and other things -->
    <bean id="tokenServices"
        class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="accessTokenValiditySeconds" value="120" />
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>
    <bean id="userApprovalHandler"
        class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <property name="tokenServices" ref="tokenServices" />
    </bean>
    <oauth:authorization-server
        client-details-service-ref="clientDetails" token-services-ref="tokenServices"
        user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>
    <oauth:resource-server id="resourceServerFilter"
        resource-id="test" token-services-ref="tokenServices" />
    <oauth:client-details-service id="clientDetails">
        <!-- client -->
        <!-- <oauth:client client-id="restapp"
            authorized-grant-types="authorization_code,client_credentials"
            authorities="ROLE_USER" scope="read,write,trust" secret="secret" /> -->

        <!-- Further add the scope and grant types for authorization_code and client_credentials -->
        <oauth:client 
            client-id="webApp"
            secret="web123"
            authorized-grant-types="password,refresh_token,authorization_code,implicit"
            authorities="ROLE_WEB"
            access-token-validity="120000"
            refresh-token-validity="1200000"
            />
        
        <oauth:client 
            client-id="curlApp"
            secret="curl123"
            authorized-grant-types="password,refresh_token"
            authorities="ROLE_CURL"
            access-token-validity="120"
            refresh-token-validity="1200"
            />

    </oauth:client-details-service>
    <sec:global-method-security
        pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the 
            http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>
    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <!-- Entry point for REST service. -->
    <beans:bean id="restServicesEntryPoint"
        class="com.pd.api.security.RestAuthenticationEntryPoint" />

    <!-- Custom User details service which is provide the user data -->
    <beans:bean id="customUserDetailsService"
        class="com.pd.api.security.CustomUserDetailsService" />

    <!-- Connect the custom authentication success handler -->
    <beans:bean id="mySuccessHandler"
        class="com.pd.api.security.RestAuthenticationSuccessHandler" />

    <!-- Using Authentication Access Denied handler -->
    <beans:bean id="myAuthenticationAccessDeniedHandler"
        class="com.pd.api.security.RestAuthenticationAccessDeniedHandler" />

    <!-- Authentication manager -->
    <!--<authentication-manager alias="authenticationManagerForRest">
        <authentication-provider user-service-ref="customUserDetailsService" />
    </authentication-manager>-->

    <!-- Enable the annotations for defining the secure role -->
    <!-- <global-method-security secured-annotations="enabled" /> -->

</beans:beans>